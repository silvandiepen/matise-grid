$cssgrid: false;

@mixin createGridClasses($child: false){
	$childClass: "";
	@if $child == true{
		$childClass: "> .column";
	}
	@for $a from 0 through $grid-columns{
		$percentage: percentage($a/$grid-columns); //
		$column: #{$a}#{$childClass};
		&.column-#{$column}{
			width: #{$percentage};

			@supports (display: grid){
				width: #{$column}fr;
			}
		}
		&.offset-#{$column}{
			margin-left: #{$percentage};
		}
		&.push-#{$column}{
			margin-right: #{$percentage};
		}
		&.pull-#{$column}{
			margin-left: -#{$percentage};
		}
	}


	$min-width: 0;
	@each $bp-name,$bp-value in $grid-breakpoints{
		$mq-only: "#{$grid-screen} and (min-width: #{$min-width}px) and (max-width: #{$bp-value}px)"; $mq: "#{$grid-screen} and (min-width: #{$min-width}px)"; $min-width: $bp-value + 1;
		@each $part,$percentage in $grid-parts{
  			&%#{$part}#{$childClass},
  			&.#{$part}#{$childClass}{
				width: percentage($percentage);
				@if $cssgrid{
					@supports (display: grid){
						$parts: $percentage * $grid-columns; width: #{$parts}fr;
					}
				}
			}
		}
		@media #{$mq-only}{
			&.#{$bp-name}-only-0#{$childClass}{
				width: 0; display: none;
			}
			@each $part,$percentage in $grid-parts{

				%.#{$bp-name}-only-#{$part}#{$childClass},
				&.#{$bp-name}-only-#{$part}#{$childClass}{
					width: percentage($percentage);
				}
			}
			@for $a from 1 through $grid-columns{
				$percentage: percentage($a/$grid-columns);
				&.#{$bp-name}-only-#{$a}#{$childClass}{
					width: $percentage;
				}
				&.offset-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-left: $percentage;
				}
				&.push-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-right: $percentage;
				}
				&.pull-#{$bp-name}-only-#{$a}#{$childClass}{
					margin-left: -#{$percentage};
				}
			}
		}
		@media #{$mq}{
			%.#{$bp-name}-0#{$childClass}
  		&.#{$bp-name}-0#{$childClass}{
				width: 0; display: none;
			}
			@each $part,$percentage in $grid-parts{
        %#{$bp-name}-#{$part}#{$childClass},
				&.#{$bp-name}-#{$part}#{$childClass}{
					width: percentage($percentage);

					@if $cssgrid{
						@supports (display: grid){
							$parts: $percentage * $grid-columns; width: #{$parts}fr;
						}
					}
				}
			}
			@for $a from 1 through $grid-columns{
				$percentage: percentage($a/$grid-columns);

				&.#{$bp-name}-#{$a}#{$childClass}{
					width: $percentage;
					@if $cssgrid{
						@supports (display: grid){
							$parts: ($a/$grid-columns) * $grid-columns; //
							width: auto; grid-column: #{$parts} span; border: 1px solid red;
						}
					}
				}
				&.offset-#{$bp-name}-#{$a}#{$childClass}{
					margin-left: $percentage;
				}
				&.push-#{$bp-name}-#{$a}#{$childClass}{
					margin-right: $percentage;
				}
				&.pull-#{$bp-name}-#{$a}#{$childClass}{
					margin-left: -#{$percentage};
				}
			}
		}
	}
}


.row{
	max-width: $grid-row-width; width: 100%; margin: auto; @include createGridClasses(true); display: flex; justify-content: flex-start; flex-flow: row wrap;

	@if $cssgrid{
		@supports (display: grid){
			display: grid; //
			grid-template-columns: repeat($grid-columns, 1fr); //
			grid-gap: 0rem; //
		}
	}
	&.center{
		justify-items: center; justify-content: center;

		@if $cssgrid{
			>.column{
				align-self: center; justify-self: center;
			}
		}
	}
	&.right{
		justify-items: right; justify-content: flex-end;

		@if $cssgrid{
			>.column{
				align-self: right; justify-self: right;
			}
		}
	}
}

%col{
	box-sizing: border-box !important;
	.content{
		padding: grid(0.25); font-family: inherit;
	}
}
//@include wildcard('col-'){ @extend %col; }
.col, .column, .columns{
	@extend %col;
	@include createGridClasses(false);
}
